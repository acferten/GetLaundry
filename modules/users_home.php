<?php


# –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
if (preg_match("~^\/start (join[\d]+|ref[\d]+)$~", $text, $matches)) {
    $command = preg_replace('/[^a-z]/', '', $matches[1]);
    file_put_contents("test1", $command);
    if ($command == "ref") {

        $un_text = substr($matches[1], 3);
        $id_ref = $un_text;

        if ($id_ref == $chat_id) {

        } else {

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–≤—ã–≤–∞–ª–∏—Å—å —É–∂–µ
            $get_user_ref = R::findOne('referal', 'chat_id = :chat_id AND ref_id_user = :ref_id_user', [':chat_id' => $chat_id, ':ref_id_user' => $id_ref]);
            if (!$get_user_ref) {


                $r_user = R::findOne('users', 'chat_id = :chat_id', [':chat_id' => $chat_id]);

                # –ï—Å–ª–∏ –º—ã –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                if ($r_user) {

                } else {

                    $info_user = R::findOne('users', 'chat_id = :chat_id', [':chat_id' => $id_ref]);
                    $info_user_nik = $info_user->first_name;

                    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è
                    if (!$info_user) {

                    } else {

                        //—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
                        $save = R::dispense('referal');
                        $save->chat_id = $chat_id; // –∏–¥ –∫—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è
                        $save->ref_id_user = $id_ref; // –∏–¥ –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
                        $save->nik = $info_user_nik; // –∏–¥ –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
                        $save->status = 0; // –∏–¥ –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
                        R::store($save);

                    }
                }
            }
        }
    }
}

if ($atext[0] == "/franshiza") {
    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $template = new Template("franshiza", $user['lang']);
    $template = $template->Load();
    $template->LoadButtons();

    $this->sendMessage($chat_id, $template->text, $template->buttons);
    return;
}

if ($atext[0] == "/start wholesalelaundries") {
    // –ø–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –æ–ø—Ç–æ–≤—ã—Ö —Å—Ç–∏—Ä–æ–∫
    $wholesaleLaundries = R::findAll('wholesale_laundry');

    // —Ñ–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    $content = "üí£ –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö, –∫—Ç–æ —á–∞—â–µ —Ö–æ—á–µ—Ç –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —á–∏—Å—Ç–æ—Ç–µ —Å–≤–æ–∏—Ö –≤–µ—â–µ–π. –ü–æ–∫—É–ø–∞—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫—É –¥–æ 20%. –ê–±–æ–Ω–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ü–µ–ª—ã–π –≥–æ–¥ c –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏.\n\n";
    foreach ($wholesaleLaundries as $wholesaleLaundry) {
        $icon = "";
        switch ($wholesaleLaundry["weight"]) {
            case 20:
                $icon = "ü•â";
                break;
            case 40:
                $icon = "ü•à";
                break;
            case 60:
                $icon = "ü•á";
                break;
        }

        $content .= "<i>$icon {$wholesaleLaundry["name"]}</i>\n";

        // —Ä–∞–∑–¥–µ–ª—è—é —Ü–µ–Ω—É —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
        $price_idr = number_format($wholesaleLaundry["price_idr"], 0, "", ".");
        $content .= "<b>–¶–µ–Ω–∞ $price_idr IDR</b>\n";

        // —Ä–∞–∑–¥–µ–ª—è—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
        $bonus_count = number_format($wholesaleLaundry["bonus_count"], 0, "", ".");
        $content .= "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞ –±–∞–ª–∞–Ω—Å $bonus_count IDR\n";

        // —Å—á–∏—Ç–∞—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IDR –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—É—á–∞–µ–º—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏ –∏ —Ä–∞–∑–¥–µ–ª—è—é —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
        $saving_count = number_format($wholesaleLaundry["bonus_count"] * $wholesaleLaundry["saving_percent"] / 100, 0, "", ".");;
        $content .= "–≠–∫–æ–Ω–æ–º–∏—Ç–µ {$wholesaleLaundry["saving_percent"]}% –∏–ª–∏ $saving_count\n";

        // —Ä–∞–∑–¥–µ–ª—è—é —Ü–µ–Ω—É –∑–∞ –∫–∏–ª–ª–æ–≥—Ä–∞–º —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
        $price_per_kg = number_format($wholesaleLaundry["price_per_kg"], 0, "", ".");
        $content .= "–¶–µ–Ω–∞ –∑–∞ 1–∫–≥ –±—É–¥–µ—Ç $price_per_kg\n\n";

        // –¥–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞ –æ–ø—Ç–æ–≤—ã—Ö —Å—Ç–∏—Ä–æ–∫
        $buttons[] = [
            $this->buildInlineKeyBoardButton($icon . " " . $wholesaleLaundry["buy_button_text"], "/wholesale_laundry_select_pay_type {$wholesaleLaundry["id"]}")
        ];
    }

    // –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    $this->sendMessage($chat_id, $content, $buttons);
}
if ($atext[0] == '/start') {

    # –ö–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç–∏–π –º–µ—Ç—Ä–∏–∫–∞
    $this->set_metrika($chat_id, 1);

    // –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
    if ($atext[2] == "mailing") {
        $this->DelMessageText($chat_id, $message_id);
    }

    if ($atext[1] == '1') {
        # –ö–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç–∏–π –º–µ—Ç—Ä–∏–∫–∞
        $this->set_metrika($chat_id, 5);
    }

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
    regusers($chat_id, $first_name, $last_name, $username);

    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $user->lang = 'ru';
    R::store($user);
    $template = new Template("start", $user['lang']);

    $template->Load();
    $template->LoadButtons();

    $this->sendMessage($chat_id, $template->text, $template->buttons);

    return;
}

if ($atext[0] == '/user_lang' && $atext[1]) {
    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $user->lang = $atext[1];
    R::store($user);

    $this->DelMessageText($chat_id, $message_id);

    $lang = $user['lang'];

    $template = new Template("start", $lang);
    $template = $template->Load();
    $template->LoadButtons();

    $this->sendMessage($chat_id, $template->text, $template->buttons);

    return;
}


# nachalo
if ($atext[0] == '/nachalo') {

    #############
    $time = strtotime(date("d.m.Y H:i")); # –ø–µ—Ä–µ–≤–æ–¥ –≤—Ä–µ–º—è –≤ UNIX

    $users = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $users->time_nachalo = $time + 600;
    R::store($users);
    #############

    # –ö–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç–∏–π –º–µ—Ç—Ä–∏–∫–∞
    $this->set_metrika($chat_id, 2);

    switch ($users['lang']) {
        case 'ru':
            $buttons[] = [
                $this->buildKeyboardButton("üìç–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"),
            ];
            break;
        case 'eng':
            $buttons[] = [
                $this->buildKeyboardButton("üìçSend geolocation"),
            ];
    }

    $template = new Template("order/step_1_in_5", $users['lang']);
    $template->Load();

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    $this->set_action($chat_id, "address");

    $this->sendMessage($chat_id, $template->text, $buttons, 0);

    return;
}

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º
if ($atext[0] == '/orders_users_adress_2' || $atext[0] && $get_action[0] == 'whatsapp' || $atext[0] && $get_action[0] == 'address_2' || $atext[0] && $get_action[0] == 'phone') {

    if ($get_action[0] == 'address_2') {
        $orders = R::findOne('orders', "id = $get_action[1]");
        $orders->address_2 = $text;
        $orders->timestamp_create = time();
        R::store($orders);
    }

    # WhatsApp
    if ($get_action[0] == 'whatsapp') {
        $set_users = R::findOne('users', "chat_id = $chat_id");
        $set_users->whatsapp = $text;
        R::store($set_users);
    }

    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    $users = R::findOne('users', "chat_id = $chat_id");

    if (!trim($users['phone'])) {

        switch ($users['lang']) {
            case 'ru':
                $buttons[] = [
                    $this->buildKeyboardButton("‚òéÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", true, false),
                ];
                break;
            case 'eng':
                $buttons[] = [
                    $this->buildKeyboardButton("‚òéÔ∏è Send number", true, false),
                ];
        }

        $template = new Template("order/step_3_in_5", $users['lang']);
        $template = $template->Load();

        $this->sendMessage($chat_id, $template->text, $buttons, 0);

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        $this->set_action($chat_id, "phone&$get_action[1]");
    } else if (!trim($users['whatsapp'])) {

        $buttons12[] = [
            $this->buildInlineKeyBoardButton("/", "/"),
        ];
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å

        switch ($users['lang']) {
            case 'ru':
                $send = $this->sendMessage($chat_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", $buttons12, 2);
                break;
            case 'eng':
                $send = $this->sendMessage($chat_id, "Your message", $buttons12, 2);
        }

        $mess = $send['result']['message_id'];

        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $this->DelMessageText($chat_id, $mess);

        $template = new Template("order/step_4_in_5", $users['lang']);
        $template = $template->Load();

        $this->sendMessage($chat_id, $template->text);

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        $this->set_action($chat_id, "whatsapp&$get_action[1]");

    } else {
        $template = new Template("order/step_5_in_5", $users['lang'], [
            new TemplateData(":getAction", $get_action[1])
        ]);

        $template = $template->Load();
        $template->LoadButtons();

        $this->sendMessage($chat_id, $template->text, $template->buttons);

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
        $this->del_action($chat_id);
    }

    return;
}

# –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑
if ($atext[0] == '/cancel_orders') {
    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);

    $template = new Template("order/cancel", $user['lang'], [
        new TemplateData(":orderId", $atext[1]),
    ]);
    $template = $template->Load();
    $template->LoadButtons();

    $this->editMessageText($chat_id, $message_id, $template->text, $template->buttons);

    return;
}

# –ó–∞–∫–∞–∑ –≥–ª–∞–≤–Ω–∞—è
if ($atext[0] == '/back_orders' || $text == '‚¨ÖÔ∏è  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–∫–∞–∑.') {

    if ($atext[2] == 'success') {
        $users = R::findOne('users', 'chat_id = ?', [$chat_id]);
        $users["time_nachalo"] = 0;
        $users["orders_count"] += 1;
        R::store($users);

        $order = R::findOne('orders', 'id = ?', [$atext[1]]);
        $order->status = 1;
        R::store($order);

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –≤ —á–∞—Ç –∞–¥–º–∏–Ω–∞
        //$this->sendOrdersAdmin(ID_CHAT, $atext[1], $username);
        $this->sendOrdersAdmin(GROUP_COURIER_CHAT_ID, $atext[1], $username);

        //$this->sendOrderCourierGroup($atext[1], $username, 0);

//        sleep(1);
//        $this->sendOrderCourier($atext[1]);
    }

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–∫–∞–∑
    if ($text == '‚¨ÖÔ∏è  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–∫–∞–∑.') {

        $this->DelMessageText($chat_id, $message_id);
        $this->DelMessageText($chat_id, $message_id - 1);

        $orders = R::findOne('orders', "id = $get_action[1]");
    } else {
        $orders = R::findOne('orders', "id = $atext[1]");
    }
    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $template = new Template("order_is_accepted", $user['lang'], [
        new TemplateData(":orderId", $orders["id"]),
    ]);

    $template = $template->Load();
    $template->LoadButtons();

    # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–∫–∞–∑
    if ($text == '‚¨ÖÔ∏è  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–∫–∞–∑.') {
        $this->sendMessage($chat_id, $template->text, $template->buttons);

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å
        $send = $this->sendMessage($chat_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", $buttons, 2);
        $mess = $send['result']['message_id'];

        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $this->DelMessageText($chat_id, $mess);
    } else {
        $this->editMessageText($chat_id, $message_id, $template->text, $template->buttons);
    }

    $this->del_action($chat_id);

    return;
}

# –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Å—Ç–∏—Ä–∫–µ1
if ($atext[0] == '/osob_po1') {

    $this->DelMessageText($chat_id, $message_id);

    $buttons[] = [
        $this->buildInlineKeyBoardButton("‚¨ÖÔ∏è  –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–∫–∞–∑."),
    ];

    $content = "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Å—Ç–∏—Ä–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–µ—â–µ–π.
 
–ü—Ä—è–º–æ –∑–¥–µ—Å—å: –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —Å–Ω–∏–º–∏—Ç–µ —Ñ–æ—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–µ—Å—Ç –Ω–∞ –≤–µ—â–∞—Ö –∏–ª–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≤–∏–¥–µ–æ. 
–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É—á—Ç—ë–º –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤–µ—â–∏ —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ.";

    $this->sendMessage($chat_id, $content, $buttons, 0);

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    $this->set_action($chat_id, "photo&$atext[1]");

    return;
}

# –æ—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
if ($atext[0] == '/cancel_orders_pochemy') {

    $this->DelMessageText($chat_id, $message_id);

    $orders = R::findOne('orders', "chat_id = $chat_id ORDER BY id DESC");
    $orders->status = 0;
    $orders->title_cancel = $atext[1];
    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
    R::store($orders);

    $this->DelMessageText(ID_CHAT, $orders['mess_id']);
    $this->DelMessageText(GROUP_COURIER_CHAT_ID, $orders['mess_id']);

    $this->sendOrdersAdmin(ID_CHAT, $orders['id'], $username);

    if ($user['lang'] == 'ru') {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("–ó–∞–∫–∞–∑–∞—Ç—å —Å—Ç–∏—Ä–∫—É", "/start 1"),
        ];
        $buttons[] = [
            $this->buildInlineKeyBoardButton("–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Å—Ç–∏—Ä–∫—É", "/set_free_orders /cancel_orders_pochemy 1"),
        ];

        $content = "üòî–ú—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –∏ —É–∂–µ —Ç–æ—Å–∫—É–µ–º!

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Å—Ç–∏—Ä–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.
–ù–∞—à–∏ –∫—É—Ä—å–µ—Ä—ã –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å 09:00 –¥–æ 20:00.

‚ùóÔ∏è–ó–∞–∫–∞–∑, —Å–¥–µ–ª–∞–Ω–Ω—ã–π <b>–¥–æ 14:00</b>, –∑–∞–±–µ—Ä—ë–º –≤ —Ç–µ—á–µ–Ω–∏–µ 2-—Ö —á–∞—Å–æ–≤ –∏ –≤–µ—Ä–Ω—ë–º –æ–±—Ä–∞—Ç–Ω–æ –∑–∞–≤—Ç—Ä–∞ –¥–Ω—ë–º.
‚ùóÔ∏è–ó–∞–∫–∞–∑, —Å–¥–µ–ª–∞–Ω–Ω—ã–π <b>–ø–æ—Å–ª–µ 14:00</b>, –∑–∞–±–µ—Ä—ë–º —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º –∏ –≤–µ—Ä–Ω—ë–º –æ–±—Ä–∞—Ç–Ω–æ –∑–∞–≤—Ç—Ä–∞ –≤–µ—á–µ—Ä–æ–º.
‚ùóÔ∏è–ó–∞–∫–∞–∑, —Å–¥–µ–ª–∞–Ω–Ω—ã–π <b>–ø–æ—Å–ª–µ 18:00</b>, –∑–∞–±–µ—Ä—ë–º –∑–∞–≤—Ç—Ä–∞ –¥–æ –æ–±–µ–¥–∞ –∏ –≤–µ—Ä–Ω—ë–º –æ–±—Ä–∞—Ç–Ω–æ –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ –¥–Ω—ë–º.";
    } else {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Order laundry", "/start 1"),
        ];
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Get free laundry", "/set_free_orders /cancel_orders_pochemy 1"),
        ];

        $content = "üòîWe have canceled your order and are already missing you!

You can order laundry at any time.
Our couriers and administrators work from 09:00 to 20:00.

‚ùóÔ∏èOrders placed <b>before 14:00</b> will be picked up within 2 hours and returned back tomorrow afternoon.
‚ùóÔ∏èOrders placed <b>after 14:00</b> will be picked up tonight and returned back tomorrow evening.
‚ùóÔ∏èOrders placed <b>after 18:00</b> will be picked up before lunch tomorrow and returned back the day after tomorrow.";

    }
    $this->sendMessage($chat_id, $content, $buttons);

    return;
}

# –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Å—Ç–∏—Ä–∫—É
if ($atext[0] == '/set_free_orders') {

    $this->set_metrika($chat_id, 7);

    /*$buttons[] = [
        $this->buildInlineKeyBoardButton("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", " ", "https://t.me/share/url?url=https://t.me/LaundryGo_bot?start=ref$chat_id"),
    ];

    $content = "<b>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ —ç—Ç–æ –∫–∏–ª–æ–≥—Ä–∞–º–º—ã –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å—Ç–∏—Ä–æ–∫ –∏–ª–∏ –∂–∏–≤—ã–µ –¥–µ–Ω—å–≥–∏ ü§ù.</b>

1.	–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º –∏ –∑–Ω–∞–∫–æ–º—ã–º.
2.	–ö–ê–ñ–î–´–ô –†–ê–ó, –∫–æ–≥–¥–∞ –≤–∞—à–∏ –¥—Ä—É–∑—å—è –±—É–¥—É—Ç —Å—Ç–∏—Ä–∞—Ç—å –≤–µ—â–∏ —É –Ω–∞—Å, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∫—ç—à–±—ç–∫ 10% —Å —Å—É–º–º—ã –∏—Ö –∑–∞–∫–∞–∑–∞.
3.	–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ, –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.
4.	–°–≤–æ–π –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–Ω—ã—Ö IDR –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–µ–Ω—é¬ª (—Å–∏–Ω—è—è –∫–Ω–æ–ø–∫–∞ –≤ –Ω–∏–∂–Ω–µ–º –ª–µ–≤–æ–º —É–≥–ª—É —ç–∫—Ä–∞–Ω–∞) - üí∞ –ë–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤
5.	–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—Ç–∏—Ä–∫—É –ë–æ–Ω—É—Å–Ω—ã–º–∏ IDR –∫–∞–∫ —á–∞—Å—Ç–∏—á–Ω–æ, —Ç–∞–∫ –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é.
6.  –ö–æ–≥–¥–∞ –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –±–æ–ª—å—à–µ 300.000, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–µ–±–µ –Ω–∞ –∫–∞—Ä—Ç—É. –û —Ç–æ–º –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É.

–û—Ç–ø—Ä–∞–≤–∏–≤ —Å—Å—ã–ª–∫—É –æ–¥–Ω–∞–∂–¥—ã, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–µ–±—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ —Å—Ç–∏—Ä–∫–∞–º–∏ –∏–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥.

–í–æ—Ç –≤–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ üëá
 https://t.me/LaundryGo_bot?start=ref$chat_id";

    $buttons[] = [
        $this->buildInlineKeyBoardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "$atext[1] $atext[2] $atext[3]"),
    ];

    $this->editMessageText($chat_id, $message_id, $content, $buttons);

    return;*/

    // —Ñ–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // –æ–±—ä—è–≤–ª—è—é —à–∞–±–ª–æ–Ω
    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $template = new Template("referal", $user['lang'], [
        new TemplateData(":chatId", $chat_id)
    ]);

    // –∑–∞–≥—Ä—É–∂–∞—é —à–∞–±–ª–æ–Ω
    $template = $template->Load();

    // –∑–∞–≥—Ä—É–∂–∞—é –∫–Ω–æ–ø–∫–∏ —à–∞–±–ª–æ–Ω–∞
    $template->LoadButtons();
//    $buttons = $template->buttons;
    /*foreach ($buttons as $key => $button) {
        $buttons[$key] = $button->PrepareToSend();
    }*/

//    $buttons[] = [
//        $this->buildInlineKeyBoardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "$atext[1] $atext[2] $atext[3]"),
//    ];

    // –≥–µ–Ω–µ—Ä–∏—Ä—É—é qr –∫–æ–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –ø–∞–ø–∫–µ
    if (!file_exists(__DIR__ . "/../img/qr/$chat_id.png")) {
        QRcode::png("https://t.me/LaundryGo_bot?start=ref$chat_id", __DIR__ . "/../img/qr/$chat_id.png", "M", 10, 2);

        $im = imagecreatefrompng(__DIR__ . "/../img/qr/$chat_id.png");
        $width = imagesx($im);
        $height = imagesy($im);

        // –∏–∑–º–µ–Ω—è—é —Ü–≤–µ—Ç –ø–∏–∫—Å–µ–ª–µ–π qr –∫–æ–¥–∞
        $fg_color = imageColorAllocate($im, 0, 101, 209);

        for ($x = 0; $x < $width; $x++) {
            for ($y = 0; $y < $height; $y++) {
                $color = imagecolorat($im, $x, $y);
                if ($color == 1) {
                    imageSetPixel($im, $x, $y, $fg_color);
                }
            }
        }

        // –≤—ã—Å—Ç–∞–≤–ª—è—é –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è qr –∫–æ–¥–∞
        $dst = imagecreatetruecolor($width, $height);
        imagecopy($dst, $im, 0, 0, 0, 0, $width, $height);
        imagedestroy($im);

        $logo = imagecreatefrompng(__DIR__ . "/../assets/img/laundry_logo.png");
        $logo_width = imagesx($logo);
        $logo_height = imagesy($logo);

        $new_width = $width / 3;
        $new_height = $logo_height / ($logo_width / $new_width);

        $x = ceil(($width - $new_width) / 2);
        $y = ceil(($height - $new_height) / 2);

        imagecopyresampled($dst, $logo, $x, $y, 0, 0, $new_width, $new_height, $logo_width, $logo_height);

        // —Å–æ—Ö—Ä–∞–Ω—è—é –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π qr –∫–æ–¥
        imagepng($dst, __DIR__ . "/../img/qr/$chat_id.png");
    }

    // –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
//    $this->sendPhoto($chat_id, "https://laundrybot.online/bot/img/qr/$chat_id.png?version=" . time(), $template->text, $buttons);
    $this->sendPhoto($chat_id, "https://laundrybot.online/bot/img/qr/$chat_id.png?version=" . time(), $template->text, $template->buttons);
    return;
}

# –û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Å—Ç–∏—Ä–∫–µ
if ($atext[0] == '/osob_po') {


    $this->DelMessageText($chat_id, $message_id);

    $buttons[] = [
        $this->buildInlineKeyBoardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–∫–∞–∑"),
    ];

    $content = "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Å—Ç–∏—Ä–∫–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –≤–µ—â–µ–π. 
–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å–æ–≤–æ–µ, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ. 
–î–∞–π—Ç–µ –Ω–∞–º –∑–Ω–∞—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –Ω–∞ –≤–µ—â–∞—Ö –∏ –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —Å–¥–µ–ª–∞—Ç—å –≤–∞—à–∏ –≤–µ—â–∏ —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ.";

    $this->sendMessage($chat_id, $content, $buttons, 0);

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    $this->set_action($chat_id, "photo&$atext[1]");

    return;
}


# –ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –∑–∞–∫–∞–∑
// TODO: –∫–∞–∫ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è –∑–∞–¥–∞—á–∞ —Å —á–∞—Ç–æ–º –∫—É—Ä—å–µ—Ä–æ–≤, —É–±—Ä–∞—Ç—å!
if ($atext[0] == '/orders_ok_kurer') {
    $wapp_prefix = "WA";

    if (substr($atext[1], 0, strlen($wapp_prefix)) == $wapp_prefix) {
        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://whatsapp.laundrybot.online/bot/webhook.php',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => json_encode([
                "data" => [
                    "type" => "pickup_order",
                    "order_id" => substr_replace($atext[1], "", 0, 2),
                    "timestamp_start" => time(),
                    "message_id" => $message_id,
                ]
            ]),
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json'
            ),
        ));

        $response = curl_exec($curl);

        curl_close($curl);

        return;
    }

    $this->get_orders($atext[1], "status", 2);


    $orders = R::findOne('orders', "id = $atext[1]");

    if ($atext[2] != 1) {

        $this->DelMessageText($chat_id, $message_id);

        $time = time();
        $time1 = time() + 10800;
        $time3 = date("H:i", time());

        $this->get_orders($atext[1], "time_start", $time);

        $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
        $template = new Template("pickup_order", $user['lang'], [
            new TemplateData(":time", $time3),
            new TemplateData(":orderId", $atext[1]),
        ]);

        $template = $template->Load();
        $template->LoadButtons();

        $this->sendMessage($orders['chat_id'], $template->text, $template->buttons);

        $content_admin = "<b>‚ÑπÔ∏è –ó–∞–∫–∞–∑: #$atext[1]</b>
			
	–ö—É—Ä—å–µ—Ä –∑–∞–±—Ä–∞–ª –≤–µ—â–∏ –≤ $time";

        $this->sendOrdersAdmin(GROUP_COURIER_CHAT_ID, $atext[1], $username);
    } else {
        $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
        $template = new Template("pickup_order", $user['lang'], [
            new TemplateData(":time", $orders["time_start"]),
            new TemplateData(":orderId", $atext[1]),
        ]);

        $template = $template->Load();
        $template->LoadButtons();

        $this->editMessageText($orders['chat_id'], $message_id, $template->text, $template->buttons);
    }

    return;
}


# –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–∫–∞–∑
if ($text == '‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∑–∞–∫–∞–∑' || $atext[0] == '/back_v') {

    if ($atext[1] == 1) {
        $this->DelMessageText($chat_id, $message_id);
        $orders = R::findOne('orders', "id = $atext[2]");
        $get_action[1] = $atext[2];
    } else {

        $this->DelMessageText($chat_id, $message_id);
        $this->DelMessageText($chat_id, $message_id - 1);

        $orders = R::findOne('orders', "id = $get_action[1]");
    }


    /*$buttons[] = [
        $this->buildInlineKeyBoardButton("–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ —Å—Ç–∏—Ä–∫–µ", " ", "https://t.me/LaundryGoBot"),
    ];
    $buttons[] = [
        $this->buildInlineKeyBoardButton("–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Å—Ç–∏—Ä–∫—É", "/set_free_orders /back_v 1 $get_action[1]"),
    ];
    $buttons[] = [
        $this->buildInlineKeyBoardButton("–ó–∞–∫–∞–∑–∞—Ç—å —Å—Ç–∏—Ä–∫—É", "/start 1"),
    ];


    $content = "üòÉ –ö—É—Ä—å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª –≤–∞—à–∏ –≤–µ—â–∏ –¥–ª—è —Å—Ç–∏—Ä–∫–∏ –≤ $orders[time_start]

–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤–µ—â–∏ –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã, –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Å–µ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞.

–ó–∞—Ç–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
üìé–Ω–∞–ª–∏—á–Ω—ã–º–∏ –∫—É—Ä—å–µ—Ä—É –≤ —Ä—É–ø–∏—è—Ö.
üìé–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞ –≤ —Ä—É–ø–∏—è—Ö.
üìé–ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ –≤ —Ä—É–±–ª—è—Ö.
üìé–æ–ø–ª–∞—Ç–∞ –±–æ–Ω—É—Å–∞–º–∏.

";*/
    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $template = new Template("pickup_order", $user['lang'], [
        new TemplateData(":time", $orders["time_start"]),
        new TemplateData(":orderId", $atext[1]),
    ]);

    $template = $template->Load();
    $template->LoadButtons();
    /*foreach ($template->buttons as $key => $button) {
        $template->buttons[$key] = $button->PrepareToSend();
    }*/

//    $this->sendMessage($chat_id, $content, $buttons);
    $this->sendMessage($chat_id, $template->text, $template->buttons);

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–º—Å
//    $send = $this->sendMessage($chat_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", $buttons, 2);
    $send = $this->sendMessage($chat_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", $template->buttons, 2);
    $mess = $send['result']['message_id'];

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    $this->DelMessageText($chat_id, $mess);

    $this->del_action($chat_id);

    return;
}


# –û –ù–ê–°
if ($atext[0] == '/onas') {
    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $template = new Template("about_us", $user['lang']);
    $template = $template->Load();
    $template->LoadButtons();

    $this->sendMessage($chat_id, $template->text, $template->buttons);

    return;
}


// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø—Ç–æ–≤—ã–º —Å—Ç–∏—Ä–∫–º
if ($atext[0] == '/wholesale_laundries') {
    // –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫–µ
    if ($atext[1] != "mailing") {
        $this->DelMessageText($chat_id, $message_id);
    }

    // –ø–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –æ–ø—Ç–æ–≤—ã—Ö —Å—Ç–∏—Ä–æ–∫
    $wholesaleLaundries = R::findAll('wholesale_laundry');

    // —Ñ–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    $content = "üí£ –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö, –∫—Ç–æ —á–∞—â–µ —Ö–æ—á–µ—Ç –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ —á–∏—Å—Ç–æ—Ç–µ —Å–≤–æ–∏—Ö –≤–µ—â–µ–π. –ü–æ–∫—É–ø–∞—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–∫–∏–¥–∫—É –¥–æ 20%. –ê–±–æ–Ω–µ–º–µ–Ω—Ç –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ü–µ–ª—ã–π –≥–æ–¥ c –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏.\n\n";
    foreach ($wholesaleLaundries as $wholesaleLaundry) {
        $icon = "";
        switch ($wholesaleLaundry["weight"]) {
            case 20:
                $icon = "ü•â";
                break;
            case 40:
                $icon = "ü•à";
                break;
            case 60:
                $icon = "ü•á";
                break;
        }

        $content .= "<i>$icon {$wholesaleLaundry["name"]}</i>\n";

        // —Ä–∞–∑–¥–µ–ª—è—é —Ü–µ–Ω—É —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
        $price_idr = number_format($wholesaleLaundry["price_idr"], 0, "", ".");
        $content .= "<b>–¶–µ–Ω–∞ $price_idr IDR</b>\n";

        // —Ä–∞–∑–¥–µ–ª—è—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
        $bonus_count = number_format($wholesaleLaundry["bonus_count"], 0, "", ".");
        $content .= "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞ –±–∞–ª–∞–Ω—Å $bonus_count IDR\n";

        // —Å—á–∏—Ç–∞—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IDR –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—É—á–∞–µ–º—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏ –∏ —Ä–∞–∑–¥–µ–ª—è—é —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
        $saving_count = number_format($wholesaleLaundry["bonus_count"] * $wholesaleLaundry["saving_percent"] / 100, 0, "", ".");;
        $content .= "–≠–∫–æ–Ω–æ–º–∏—Ç–µ {$wholesaleLaundry["saving_percent"]}% –∏–ª–∏ $saving_count\n";

        // —Ä–∞–∑–¥–µ–ª—è—é —Ü–µ–Ω—É –∑–∞ –∫–∏–ª–ª–æ–≥—Ä–∞–º —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
        $price_per_kg = number_format($wholesaleLaundry["price_per_kg"], 0, "", ".");
        $content .= "–¶–µ–Ω–∞ –∑–∞ 1–∫–≥ –±—É–¥–µ—Ç $price_per_kg\n\n";

        // –¥–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏ –ø–∞–∫–µ—Ç–∞ –æ–ø—Ç–æ–≤—ã—Ö —Å—Ç–∏—Ä–æ–∫
        $buttons[] = [
            $this->buildInlineKeyBoardButton($icon . " " . $wholesaleLaundry["buy_button_text"], "/wholesale_laundry_select_pay_type {$wholesaleLaundry["id"]}")
        ];
    }

    // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
//    $this->DelMessageText($chat_id, $message_id);

    // –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    $this->sendMessage($chat_id, $content, $buttons);

    return;
}


// –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –æ–¥–Ω–æ–π –∏–∑ –æ–ø—Ç–æ–≤—ã—Ö —Å—Ç–∏—Ä–æ–∫
if ($atext[0] == "/wholesale_laundry_select_pay_type" && $atext[1]) {
    // –ø–æ–ª—É—á–∞—é –ø–∞–∫–µ—Ç –æ–ø—Ç–æ–≤—ã—Ö —Å—Ç–∏—Ä–æ–∫ –ø–æ id
    $wholesale_laundry = R::findOne('wholesale_laundry', "id = {$atext[1]}");

    // —Ñ–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    $content = "<i>{$wholesale_laundry["name"]}.</i>\n\n";

    // —Ä–∞–∑–¥–µ–ª—è—é —Ü–µ–Ω—É —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
    $price_idr = number_format($wholesale_laundry["price_idr"], 0, "", ".");
    $content .= "<b>–¶–µ–Ω–∞ $price_idr IDR</b>\n\n";

    // —Ä–∞–∑–¥–µ–ª—è—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
    $bonus_count = number_format($wholesale_laundry["bonus_count"], 0, "", ".");
    $content .= "–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –Ω–∞ –±–∞–ª–∞–Ω—Å $bonus_count IDR\n";

    // —Å—á–∏—Ç–∞—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ IDR –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—É—á–∞–µ–º—ã—Ö –±–æ–Ω—É—Å–æ–≤ –∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —ç–∫–æ–Ω–æ–º–∏–∏ –∏ —Ä–∞–∑–¥–µ–ª—è—é —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
    $saving_count = number_format($wholesale_laundry["bonus_count"] * $wholesale_laundry["saving_percent"] / 100, 0, "", ".");;
    $content .= "–≠–∫–æ–Ω–æ–º–∏—Ç–µ {$wholesale_laundry["saving_percent"]}% –∏–ª–∏ $saving_count IDR\n";

    // —Ä–∞–∑–¥–µ–ª—è—é —Ü–µ–Ω—É –∑–∞ –∫–∏–ª–ª–æ–≥—Ä–∞–º —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
    $price_per_kg = number_format($wholesale_laundry["price_per_kg"], 0, "", ".");
    $content .= "–¶–µ–Ω–∞ –∑–∞ 1 –∫–≥ –±—É–¥–µ—Ç $price_per_kg IDR\n\n";

    $content .= "–ö–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ–ø–ª–∞—Ç—É?";

    // —Ñ–æ—Ä–º–∏—Ä—É—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    $buttons = [
        [
            $this->buildInlineKeyBoardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞", "/buy_wholesale_laundry 1 {$wholesale_laundry["id"]}")
        ],
        [
            $this->buildInlineKeyBoardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ", "/buy_wholesale_laundry 2 {$wholesale_laundry["id"]}")
        ],
        [
            $this->buildInlineKeyBoardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "/wholesale_laundries")
        ]
    ];

    // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    $this->DelMessageText($chat_id, $message_id);

    // –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    $this->sendMessage($chat_id, $content, $buttons);

    return;
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –æ–¥–Ω–æ–π –∏–∑ –æ–ø—Ç–æ–≤—ã—Ö —Å—Ç–∏—Ä–æ–∫
if ($atext[0] == "/buy_wholesale_laundry" && $atext[1] && $atext[2]) {
    $pay_type = $atext[1];
    $wholesale_laundry_id = $atext[2];

    // –ø–æ–ª—É—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
    $user = R::findOne("users", "chat_id = $chat_id");

    // –ø–æ–ª—É—á–∞—é –ø–∞–∫–µ—Ç –æ–ø—Ç–æ–≤—ã—Ö —Å—Ç–∏—Ä–æ–∫ –ø–æ id
    $wholesale_laundry = R::findOne('wholesale_laundry', "id = $wholesale_laundry_id");

    // —Ñ–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    switch ($pay_type) {
        case 1: // –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ BRI bank
            $content = "üí∏ –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞ BRI –≤ —Ä—É–ø–∏—è—Ö.\n";
            $content .= "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç–µ, –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–ª—É—á–∏–º –¥–µ–Ω—å–≥–∏, —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç.\n\n";
            $content .= "462 801 004 036 508\n";
            $content .= "Anak Agung Gede Adi Semara\n\n";

            // –†–∞–∑–¥–µ–ª—è—é —Ü–µ–Ω—É —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
            $price_idr = number_format($wholesale_laundry["price_idr"], 0, "", ".");

            $content .= "<b>–°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ $price_idr IDR.</b>";
            break;
        case 2: // –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
            $content = "üí∏ –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ –≤ —Ä—É–±–ª—è—Ö.\n";
            $content .= "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç–µ, –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–ª—É—á–∏–º –¥–µ–Ω—å–≥–∏, —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç.\n\n";
            $content .= "2200 7007 7932 1818\n";
            $content .= "Olga G.\n\n";

            // –ü–µ—Ä–µ–≤–æ–∂—É —Ü–µ–Ω—É –≤ —Ä—É–±–ª–∏ –∏ —Ä–∞–∑–¥–µ–ª—è—é —Ç–æ—á–∫–∞–º–∏ –ø–æ —Ä–∞–∑—Ä—è–¥–∞–º
            $price_idr = number_format($wholesale_laundry["price_idr"] / 1000 * 6.2, 0, "", ".");

            $content .= "<b>–°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ $price_idr —Ä—É–±–ª–µ–π.</b>";
            break;
    }

    // —Ñ–æ—Ä–º–∏—Ä—É—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    $buttons = [
        /*[
            $this->buildInlineKeyBoardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", "/wholesale_laundry_pay_type_selected $wholesale_laundry_id $pay_type")
        ],*/
        [
            $this->buildInlineKeyBoardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É", " ", "https://t.me/LaundryGoBot"),
        ],
        [
            $this->buildInlineKeyBoardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "/wholesale_laundry_select_pay_type $wholesale_laundry_id")
        ],
    ];

    // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    $this->DelMessageText($chat_id, $message_id);

    // –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    $this->sendMessage($chat_id, $content, $buttons);


    $log_wholesale_laundry_payment = R::findOne('logwholesalelaundrypayment', "user_id = {$user["id"]} AND wholesale_laundry_id = $wholesale_laundry_id");
    if ($log_wholesale_laundry_payment) {
        $log_wholesale_laundry_payment->pay_type = $pay_type;
        $send = $this->DelMessageText(ID_CHAT, $log_wholesale_laundry_payment["message_id"]);
        R::store($log_wholesale_laundry_payment);
    } else {
        // —Ñ–æ—Ä–º–∏—Ä—É—é –æ–ø–ª–∞—Ç—É –ø–∞–∫–µ—Ç–∞ –æ–ø—Ç–æ–≤—ã—Ö —Å—Ç–∏—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        $log_wholesale_laundry_payment = R::dispense('logwholesalelaundrypayment');

        $log_wholesale_laundry_payment->user_id = $user["id"];
        $log_wholesale_laundry_payment->wholesale_laundry_id = $wholesale_laundry_id;
        $log_wholesale_laundry_payment->pay_type = $pay_type;
        $log_wholesale_laundry_payment->timestamp = time();

        R::store($log_wholesale_laundry_payment);
    }

    $pay_type_content_admin = "";
    switch ($pay_type) {
        case 1:
            $pay_type_content_admin = "transfer to bank BRI card.";
            break;
        case 2:
            $pay_type_content_admin = "transfer to Tinkoff card";
            break;
    }

    $timestamp_date = date("d.m.Y", $log_wholesale_laundry_payment["timestamp"]);
    $timestamp_time = date("H:i", $log_wholesale_laundry_payment["timestamp"]);

    $bonus_count = number_format($wholesale_laundry["bonus_count"], 0, "", ".");

    $content_admin = "User id: <b>{$user["id"]}</b>\n";
    $content_admin .= "<b>Created: $timestamp_date $timestamp_time</b>\n";
    $content_admin .= "User login: <b>@{$user["username"]}</b>\n";
    $content_admin .= "Number: <b>{$user["phone"]}</b>\n";
    $content_admin .= "Whatsapp: <b>{$user["whatsapp"]}</b>\n";
    $content_admin .= "Number of kilograms: <b>{$wholesale_laundry["weight"]} kg\n</b>";
    $content_admin .= "<b>Payment amount: $bonus_count IDR\n</b>";
    $content_admin .= "Pay type: <b>$pay_type_content_admin</b>";

    $buttons_admin = [
        [
            $this->buildInlineKeyBoardButton("Top up balance", "/wholesale_payment {$user["id"]} {$log_wholesale_laundry_payment["id"]}"),
        ],
    ];
    $buttons_admin[] = [
        $this->buildInlineKeyBoardButton("Back", "/order_report_back"),
    ];

    $send = $this->sendMessage(ID_CHAT, $content_admin, $buttons_admin);
    $message_id = $send['result']['message_id'];
    $log_wholesale_laundry_payment["message_id"] = $message_id;
    R::store($log_wholesale_laundry_payment);
    return;
}

# contacst
if ($atext[0] == '/contacst') {
    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $template = new Template("contacts", $user['lang']);
    $template = $template->Load();
    $template->LoadButtons();

    $this->sendMessage($chat_id, $template->text, $template->buttons);

    return;
}

# –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Å—Ç–∏—Ä–∫—É
if ($atext[0] == '/set_free_orders_menu') {

    # –ö–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç–∏–π –º–µ—Ç—Ä–∏–∫–∞
    $this->set_metrika($chat_id, 7);

    // —Ñ–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // –æ–±—ä—è–≤–ª—è—é —à–∞–±–ª–æ–Ω
    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $template = new Template("referal", $user['lang'], [
        new TemplateData(":chatId", $chat_id)
    ]);

    // –∑–∞–≥—Ä—É–∂–∞—é —à–∞–±–ª–æ–Ω
    $template = $template->Load();

    // –∑–∞–≥—Ä—É–∂–∞—é –∫–Ω–æ–ø–∫–∏ —à–∞–±–ª–æ–Ω–∞
    $template->LoadButtons();

    // –≥–µ–Ω–µ—Ä–∏—Ä—É—é qr –∫–æ–¥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –ø–∞–ø–∫–µ
    if (!file_exists(__DIR__ . "/../img/qr/$chat_id.png")) {
        QRcode::png("https://t.me/LaundryGo_bot?start=ref$chat_id", __DIR__ . "/../img/qr/$chat_id.png", "M", 10, 2);

        $im = imagecreatefrompng(__DIR__ . "/../img/qr/$chat_id.png");
        $width = imagesx($im);
        $height = imagesy($im);

        // –∏–∑–º–µ–Ω—è—é —Ü–≤–µ—Ç –ø–∏–∫—Å–µ–ª–µ–π qr –∫–æ–¥–∞
        $fg_color = imageColorAllocate($im, 0, 101, 209);

        for ($x = 0; $x < $width; $x++) {
            for ($y = 0; $y < $height; $y++) {
                $color = imagecolorat($im, $x, $y);
                if ($color == 1) {
                    imageSetPixel($im, $x, $y, $fg_color);
                }
            }
        }

        // –≤—ã—Å—Ç–∞–≤–ª—è—é –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è qr –∫–æ–¥–∞
        $dst = imagecreatetruecolor($width, $height);
        imagecopy($dst, $im, 0, 0, 0, 0, $width, $height);
        imagedestroy($im);

        $logo = imagecreatefrompng(__DIR__ . "/../assets/img/laundry_logo.png");
        $logo_width = imagesx($logo);
        $logo_height = imagesy($logo);

        $new_width = $width / 3;
        $new_height = $logo_height / ($logo_width / $new_width);

        $x = ceil(($width - $new_width) / 2);
        $y = ceil(($height - $new_height) / 2);

        imagecopyresampled($dst, $logo, $x, $y, 0, 0, $new_width, $new_height, $logo_width, $logo_height);

        // —Å–æ—Ö—Ä–∞–Ω—è—é –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π qr –∫–æ–¥
        imagepng($dst, __DIR__ . "/../img/qr/$chat_id.png");
    }

    // –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
//    $this->sendPhoto($chat_id, "https://laundrybot.online/bot/img/qr/$chat_id.png?version=" . time(), $template->text, $buttons);
    $this->sendPhoto($chat_id, "https://laundrybot.online/bot/img/qr/$chat_id.png?version=" . time(), $template->text, $template->buttons);
    return;
}

#  cancel_osob_end
if ($atext[0] == '/cancel_osob_end' && $atext[1]) {

    if ($chat_id == GROUP_WASHERS_CHAT_ID) {
        $order = R::findOne('orders', "id = $atext[1]");
        $user = R::findOne('users', "chat_id = {$order["chat_id"]}");
        $this->DelMessageText($chat_id, $message_id);
        $this->DelMessageText($chat_id, $order['mess_id']);
        $this->sendOrderWasher($atext[1], $user['username'], $order['washing_status'], False);
    } elseif ($chat_id == ID_CHAT || $chat_id == GROUP_COURIER_CHAT_ID) {
        $order = R::findOne('orders', "id = $atext[1]");
        $this->DelMessageText($chat_id, $order['mess_id']);
        $this->DelMessageText($chat_id, $message_id);
        $this->sendOrdersAdmin($chat_id, $atext[1], $message_id, False);
    }

    return;
}

# 1 –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—Å–∞ –∑–∞–∫–∞–∑–∞
if ($atext[0] == '/orders_ves_kurer') {

    $this->DelMessageText($chat_id, $message_id);

    $buttons[] = [
        $this->buildInlineKeyBoardButton("üö´ NO", "/cancel_osob_end $atext[1]"),
    ];

    $template = new Template("order/pickup/order_weight", null, [
        new TemplateData(":orderId", $atext[1])
    ]);
    $template = $template->Load();

    $send = $this->sendMessage(GROUP_COURIER_CHAT_ID, $template->text, $buttons);

    $mess_id = $send['result']['message_id'];

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    $this->set_action($chat_id, "orders_ves_kurer&$mess_id&$atext[1]");

    return;
}


# 2 –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—Å–∞ –∑–∞–∫–∞–∑–∞
if (isset($atext[0]) && $get_action[0] == 'orders_ves_kurer') {

    # $get_action[2] - –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
    # $get_action[1] - –∏–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    # $get_action[0] - —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã

    $this->DelMessageText($chat_id, $message_id);

    $atext_ves = explode(" ", $text);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
    $weight_all = [
        'closes' => trim($atext_ves[0]),
        'shoes' => trim($atext_ves[1]),
        'bed_linen' => trim($atext_ves[2]),
        'organic' => trim($atext_ves[3])
    ];

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    $prices = [
        'closes' => $weight_all['closes'] * 80000,
        'shoes' => $weight_all['shoes'] * 120000,
        'bed_linen' => $weight_all['bed_linen'] * 50000,
        'organic' => $weight_all['organic'] * 150000
    ];

    // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—Å–µ –≤–µ—â–∏
    $price = number_format(array_sum($prices), 0, "", ".");

    $template = new Template("order/pickup/order_weight_1", null, [
        new TemplateData(":orderId", $get_action[2]),

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–µ –æ–¥–µ–∂–¥—ã
        new TemplateData(":clothesWeight", $weight_all['closes']),
        new TemplateData(":clothesPrice", number_format($prices['closes'], 0, '', '.')),

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–∞—Ä –æ–±—É–≤–∏
        new TemplateData(":pairOfShoes", $weight_all['shoes']),
        new TemplateData(":shoesPrice", number_format($prices['shoes'], 0, '', '.')),

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–µ –ø–æ—Å—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ–ª—å—è
        new TemplateData(":badLinenWeight", $weight_all['bed_linen']),
        new TemplateData(":badLinenPrice", number_format($prices['bed_linen'], 0, '', '.')),

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—â–∞—Ö –¥–ª—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Å—Ç–∏—Ä–∫–∏
        new TemplateData(":organicWeight", $weight_all['organic']),
        new TemplateData(":organicPrice", number_format($prices['organic'], 0, '', '.')),

        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        new TemplateData(":totalPrice", $price),
    ]);

    $template->Load();

    $buttons[] = [
        $this->buildInlineKeyBoardButton("‚úÖ YES", "/orders_ves_kurer_ok success $get_action[2]"),
    ];
    $buttons[] = [
        $this->buildInlineKeyBoardButton("üö´ NO", "/cancel_osob_end $get_action[2]"),
    ];

    $this->editMessageText($chat_id, $get_action[1], $template->text, $buttons);

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    $this->set_action($chat_id, "$get_action[2]&$get_action[1]&$text");

    return;
}


# 3 –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—Å–∞ –∑–∞–∫–∞–∑–∞
if ($atext[0] == '/orders_ves_kurer_ok') {

    $this->DelMessageText($chat_id, $message_id);

    $atext_ves = explode(" ", $get_action[2]);

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–µ—Å –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
    $weight_all = [
        'closes' => trim($atext_ves[0]),
        'shoes' => trim($atext_ves[1]),
        'bed_linen' => trim($atext_ves[2]),
        'organic' => trim($atext_ves[3])
    ];

    // –†–∞—Å—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    $prices = [
        'closes' => $weight_all['closes'] * 80000,
        'shoes' => $weight_all['shoes'] * 120000,
        'bed_linen' => $weight_all['bed_linen'] * 50000,
        'organic' => $weight_all['organic'] * 150000
    ];

    // –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—Å–µ –≤–µ—â–∏
    $total_price = number_format(array_sum($prices), 0, "", ".");

    // –ù—É–∂–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
    $unformatted_total_price = array_sum($prices);

    $wapp_prefix = "WA";

    if (substr($get_action[0], 0, strlen($wapp_prefix)) == $wapp_prefix) {
        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://whatsapp.laundrybot.online/bot/webhook.php',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => json_encode([
                "data" => [
                    "type" => "weight",
                    "weight" => $atext_ves[0],
                    "order_id" => substr_replace($get_action[0], "", 0, 2),
                    "message_id" => $message_id,
                    "price_weight" => $prices['closes'],
                    "shoes" => $weight_all['shoes'],
                    "price_shoes" => $prices['shoes'],
                    "total_price" => $total_price,
                    "bed_linen" => $weight_all['bed_linen'],
                    "bed_linen_price" => $prices['bed_linen'],
                    "organic" => $weight_all['organic'],
                    "organic_price" => $prices['organic']
                ]
            ]),
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json'
            ),
        ));

        $response = curl_exec($curl);

        curl_close($curl);

        return;
    }

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–∞—Å—á–µ—Ç—ã –≤ –ë–î
    $orders = R::findOne('orders', "id = $get_action[0]");
    $user = R::findOne('users', 'chat_id = ?', [$orders['chat_id']]);

    $orders->wt = $weight_all['closes']; # –í–µ—Å –æ–¥–µ–∂–¥—ã
    $orders->price_wt = number_format($prices['closes'], 0, '', '.');  # –¶–µ–Ω–∞ –∑–∞ –æ–¥–µ–∂–¥—É

    // TODO: –ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –Ω–∞ —Ü–∏–∫–ª —Å –∫–ª—é—á–∞–º–∏

    if ($weight_all['shoes'] != 0) {
        $orders->shoes = $weight_all['shoes'];
        $orders->price_shoes = number_format($prices['shoes'], 0, '', '.');
    }

    if ($weight_all['bed_linen'] != 0) {
        $orders->bed_linen = $weight_all['bed_linen'];
        $orders->bed_linen_price = number_format($prices['bed_linen'], 0, '', '.');
    }

    if ($weight_all['organic'] != 0) {
        $orders->organic = $weight_all['organic'];
        $orders->organic_price = number_format($prices['organic'], 0, '', '.');
    }

    $orders->price = $total_price;
    R::store($orders);

    $this->sendOrdersAdmin($chat_id, $get_action[0], 1);

    $template = new Template("order/pickup/order_weight_2", $user['lang'], [
        new TemplateData(":orderId", $get_action[2]),

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–µ –æ–¥–µ–∂–¥—ã
        new TemplateData(":clothesWeight", $weight_all['closes']),
        new TemplateData(":clothesPrice", number_format($prices['closes'], 0, '', '.')),

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–∞—Ä –æ–±—É–≤–∏
        new TemplateData(":pairOfShoes", $weight_all['shoes']),
        new TemplateData(":shoesPrice", number_format($prices['shoes'], 0, '', '.')),

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–µ –ø–æ—Å—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ–ª—å—è
        new TemplateData(":badLinenWeight", $weight_all['bed_linen']),
        new TemplateData(":badLinenPrice", number_format($prices['bed_linen'], 0, '', '.')),

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—â–∞—Ö –¥–ª—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Å—Ç–∏—Ä–∫–∏
        new TemplateData(":organicWeight", $weight_all['organic']),
        new TemplateData(":organicPrice", number_format($prices['organic'], 0, '', '.')),

        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        new TemplateData(":totalPrice", $total_price),
    ]);

    $template->Load();

    $lifepay_order_id = (int)($orders->id . $user->id . (time() % 1000));
    $orders->lifepay_order_id = $lifepay_order_id;
    R::store($orders);

    switch ($user['lang']) {
        case 'ru':
            $buttons[] = [
                $this->buildInlineKeyBoardButton("–ù–∞–ª–∏—á–Ω—ã–µ –∫—É—Ä—å–µ—Ä—É –≤ —Ä—É–ø–∏—è—Ö", "/sposob_pay 1 test $get_action[0]"),
            ];
            $buttons[] = [
                $this->buildInlineKeyBoardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ BRI –≤ —Ä—É–ø–∏—è—Ö", "/sposob_pay 2 $unformatted_total_price $get_action[0]"),
            ];
            $buttons[] = [
                $this->buildInlineKeyBoardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –≤ —Ä—É–±–ª—è—Ö", "/sposob_pay 3 $unformatted_total_price $get_action[0]"),
            ];
            $buttons[] = [
                $this->buildInlineKeyBoardButton("–û–ø–ª–∞—Ç–∞ –ø–æ –°–ë–ü", "", "https://partner.life-pay.ru/alba/input/?name=%D0%9E%D0%BF%D0%BB%D0%B0%D1%82%D0%B0+%D1%83%D1%81%D0%BB%D1%83%D0%B3+%D0%BF%D1%80%D0%B0%D1%87%D0%B5%D1%87%D0%BD%D0%BE%D0%B9+LaundryBot&cost={$total_price}&key=KFBsJSEbBdjuZM4r4u9HpMTYWE%2FvPpBNAAN6%2FYJgl5w%3D&default_email=&prepayment_page=0&order_id={$lifepay_order_id}"),
            ];
            $buttons[] = [
                $this->buildInlineKeyBoardButton("–û–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–∞–º–∏", "/sposob_pay 4 $unformatted_total_price $get_action[0]"),
            ];
            break;
        case 'eng':
            $buttons[] = [
                $this->buildInlineKeyBoardButton("Cash to courier", "/sposob_pay 1 test $get_action[0]"),
            ];
            $buttons[] = [
                $this->buildInlineKeyBoardButton("Transfer to local BRI bank", "/sposob_pay 2 $unformatted_total_price $get_action[0]"),
            ];
            $buttons[] = [
                $this->buildInlineKeyBoardButton("Pay with bonuses", "/sposob_pay 4 $unformatted_total_price $get_action[0]"),
            ];
    }

    $this->sendMessage($orders['chat_id'], $template->text, $buttons);

    $courier_chat_buttons = [
        $this->buildInlineKeyBoardButton("Add photo", "/order_courier_group_scales $get_action[2]"),
    ];
    // –∑–∞–∫–æ–Ω—á–∏–ª–∞ –∑–¥–µ—Å—å —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å —Ñ–æ—Ç–∫–∞ –Ω–∞ –≤–µ—Å–∞—Ö –∏ –ø–æ—Ç–æ–º —Ñ–æ—Ç–∫–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —à–º–æ—Ç–æ–∫

    $referal = R::findOne('referal', "chat_id = {$orders["chat_id"]}");


    if ($referal) {
        // –°—á–∏—Ç–∞—é –±–æ–Ω—É—Å—ã –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        $percent = 10;
        $price_balance = ($unformatted_total_price * $percent) / 100;
        $formatted_price_balance = number_format($price_balance, 0, "", ".");

        // –î–æ–±–∞–≤–ª—è—é –±–æ–Ω—É—Å—ã –∫ –±–∞–ª–∞–Ω—Å—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        $ref_user = R::findOne('users', "chat_id = {$referal["ref_id_user"]}");
        $ref_user["balance"] += $price_balance;
        R::store($ref_user);

        $formatted_ref_user_balance = number_format($ref_user["balance"], 0, "", ".");


        $templateUser = new Template("referal_notification", $ref_user['lang'], [
            new TemplateData(":formattedPriceBalance", $formatted_price_balance),
            new TemplateData(":formattedRefUserBalance", $formatted_ref_user_balance),
            new TemplateData(":chatId", $ref_user["chat_id"]),
        ]);

        $templateUser = $templateUser->Load();
        $templateUser->LoadButtons();

        // –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—É
        $this->sendMessage($ref_user["chat_id"], $templateUser->text, $templateUser->buttons);
    }

    return;
}


# 4 –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–µ—Å –∑–∞–∫–∞–∑–∞
if ($atext[0] == '/sposob_pay') {
    $pay_type = (int)$atext[1];
    $order_id = $atext[3];
    $content1 = "";
    $content_admin = "";

    $order = R::findOne('orders', "id = $order_id");
    $user = R::findOne("users", "chat_id = $chat_id");

    switch ($pay_type) {
        case 1:
            if ($user['lang'] == 'ru') {
                $content1 .= "üôè–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã!\n\n
üí∏–ü–µ—Ä–µ–¥–∞–π—Ç–µ –¥–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞—à–µ–º—É –∫—É—Ä—å–µ—Ä—É –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞—Ñ—Ñ—É –Ω–∞ —Ä–µ—Å–µ–ø—à–µ–Ω–µ. –£ –∫—É—Ä—å–µ—Ä–∞ –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç—Å—è —Å —Å–æ–±–æ–π —Å–¥–∞—á–∞.";
            } else {
                $content1 .= "üôèThank you for choosing the payment method!\n\n
üí∏Give this amount to our courier or leave the staff at the reception. The courier always has change with him.";
            }

            $content_admin .= "<b>‚ÑπÔ∏è Order: #$atext[3]</b> \n\n";
            $content_admin .= "Payment: <b>courier</b> \n";

            break;
        case 2:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–º—Å
            if ($user['lang'] == 'ru') {
                $content1 .= "üí≥ –í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫–æ–≥–æ –±–∞–Ω–∫–∞ BRI –≤ —Ä—É–ø–∏—è—Ö.\n\n";
                $content1 .= "4628 0100 4036 508 \n";
                $content1 .= "Anak Agung Gede Adi Semara \n\n";
                $content1 .= "üßæ –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç–µ, –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n";

                $content_sum = number_format($atext[2], 0, "", ".");

                $content1 .= "<b>–°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ $content_sum —Ä—É–ø–∏–π</b>";
            } else {
                $content1 .= "üí≥ Here is the data for the transfer to the card of the Indonesian bank BRI in IDR.\n\n";
                $content1 .= "If you are transferring from an Indonesian bank card, then use <b>the account number</b>.\n";
                $content1 .= "4628 0100 4036 508 \n\n";
                $content1 .= "If you have a card of another country, then transfer by <b>card number</b>\n";
                $content1 .= "6013 0111 3096 4124 \n\n";
                $content1 .= "Card and account in the name:\n";
                $content1 .= "<b>Anak Agung Gede Adi Semara</b>\n\n";
                $content_sum = number_format($atext[2], 0, "", ".");

                $content1 .= "<b>Amount to transfer $content_sum IDR</b>\n\n";
                $content1 .= "üßæ After you transfer the money, please send a payment receipt to the chat manager.\n\n";
            }

            $content_admin .= "<b>‚ÑπÔ∏è Order: #$atext[3]</b> \n\n";
            $content_admin .= "Payment: <b>transfer to Agung card</b> \n";
            /*$buttons[] = [
                $this->buildInlineKeyBoardButton("üßæ–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ", "/send_check $order_id"),
            ];*/
            break;
        case 3:
            $sum = number_format($atext[2] / 1000 * 6.2, 0, "", ".");

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–º—Å
            $content1 .= "–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞ –∫–∞—Ä—Ç—É –¢–∏–Ω—å–∫–æ—Ñ—Ñ –≤ —Ä—É–±–ª—è—Ö. 
–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–µ—Ä–µ–≤–µ–¥—ë—Ç–µ, –ø—Ä–∏—à–ª–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É.\n\n";
            $content1 .= "2200 7007 7932 1818 \n";
            $content1 .= "Olga G. \n\n";
            $content1 .= "<b>–°—É–º–º–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ $sum —Ä—É–±–ª–µ–π.</b>";

            $content_admin .= "<b>‚ÑπÔ∏è Order: #$atext[3]</b> \n\n";
            $content_admin .= "Payment: <b>transfer to Tinkoff card</b> \n";
            /*$buttons[] = [
                $this->buildInlineKeyBoardButton("üßæ–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ", "/send_check $order_id"),
            ];*/
            break;
        case 4:
            $user = R::findOne("users", "chat_id = $chat_id");
            if ($user) {
                if ($user['lang'] == 'ru') {
                    $user_balance = number_format($user["balance"], 0, "", ".");
                    $content_user = "<b>–í–∞—à –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω $user_balance IDR</b>\n\n";

                    $order_sum = number_format($atext[2], 0, "", ".");
                    $content_user .= "–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (<b>#$order_id</b>): $order_sum IDR\n";

                    if ($atext[2] > $user["balance"]) {
                        $content_user .= "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–∞–º–∏ {$user["balance"]} IDR\n\n";
                        $order_remaining_sum = $atext[2] - $user["balance"];
                    } else {
                        $content_user .= "–í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–∞–º–∏ $order_sum IDR\n\n";
                        $order_remaining_sum = 0;
                    }

                    $order_remaining_sum_content = number_format($order_remaining_sum, 0, "", ".");
                    $content_user .= "<b>–û—Å—Ç–∞—Ç–æ–∫ –∫ –æ–ø–ª–∞—Ç–µ –±—É–¥–µ—Ç $order_remaining_sum_content IDR</b>\n\n";

                    $content_user .= "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ –∑–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑?";

                    $buttons_user = [
                        [
                            $this->buildInlineKeyBoardButton("–î–∞", "/pay_type_bonus_success $order_id"),
                        ],
                        [
                            $this->buildInlineKeyBoardButton("–ù–µ—Ç", "/pay_type_bonus_deny $order_id"),
                        ],
                    ];
                } else {
                    $user_balance = number_format($user["balance"], 0, "", ".");
                    $content_user = "<b>Your bonus balance equals $user_balance IDR</b>\n\n";

                    $order_sum = number_format($atext[2], 0, "", ".");
                    $content_user .= "Order amount (<b>#$order_id</b>): $order_sum IDR\n";

                    if ($atext[2] > $user["balance"]) {
                        $content_user .= "You can pay with {$user["balance"]} IDR bonuses\n\n";
                        $order_remaining_sum = $atext[2] - $user["balance"];
                    } else {
                        $content_user .= "You can pay with $order_sum IDR\n\n";
                        $order_remaining_sum = 0;
                    }

                    $order_remaining_sum_content = number_format($order_remaining_sum, 0, "", ".");
                    $content_user .= "<b>The balance due will be $order_remaining_sum_content IDR</b>\n\n";

                    $content_user .= "Are you sure you want to redeem points for this order?";

                    $buttons_user = [
                        [
                            $this->buildInlineKeyBoardButton("Yes", "/pay_type_bonus_success $order_id"),
                        ],
                        [
                            $this->buildInlineKeyBoardButton("No", "/pay_type_bonus_deny $order_id"),
                        ],
                    ];
                }

                $this->sendMessage($chat_id, $content_user, $buttons_user);
                return;
            }
            break;
    }

    if ($user['lang'] == 'ru') {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", " ", "https://t.me/LaundryGoBot"),
        ];
    } else {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Message to manager", " ", "https://t.me/LaundryGoBot"),
        ];
    }

    $this->sendMessage($chat_id, $content1, $buttons);
    $order->payment = $atext[1];
    R::store($order);

    $this->DelMessageText($order['temp_chat_id'], $order['mess_id']);
    $this->sendOrdersAdmin($order['temp_chat_id'], $atext[3], $username);

    return;
}

if ($atext[0] == "/send_check" && $atext[1] && $atext[3]) {
    #atext[2] - id —á–∞—Ç–∞

    $orderId = (int)$atext[1];
    $order = R::findOne("orders", "id = $orderId");

    $content_user = "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:";

    $this->sendMessage($chat_id, $content_user);
    $this->set_action($chat_id, "send_check&$orderId");

    return;
}


if ($atext[0] == "/pay_type_bonus_deny" && $atext[1]) {
    $this->DelMessageText($chat_id, $message_id);
    $order_id = (int)$atext[1];
    $order = R::findOne("orders", "id = $order_id");
    $user = R::findOne('users', 'chat_id = ?', $order['chat_id']);


    $template = new Template("order/pickup/order_weight_2", $user['lang'], [
        new TemplateData(":orderId", $order_id),
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–µ –æ–¥–µ–∂–¥—ã
        new TemplateData(":clothesWeight", $order["wt"]),
        new TemplateData(":clothesPrice", $order["price_wt"]),
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–∞—Ä –æ–±—É–≤–∏
        new TemplateData(":pairOfShoes", $order["shoes"]),
        new TemplateData(":shoesPrice", $order["price_shoes"]),
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Å–µ –ø–æ—Å—Ç–µ–ª—å–Ω–æ–≥–æ –±–µ–ª—å—è
        new TemplateData(":badLinenWeight", $order['bed_linen']),
        new TemplateData(":badLinenPrice", $order['bed_linen_price']),
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—â–∞—Ö –¥–ª—è –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–π —Å—Ç–∏—Ä–∫–∏
        new TemplateData(":organicWeight", $order['organic']),
        new TemplateData(":organicPrice", $order['organic_price']),
        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
        new TemplateData(":totalPrice", $order['price']),
    ]);
    $template = $template->Load();

    $price = (int)str_replace(".", "", $order["price"]);

    if ($user['lang'] == 'ru') {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("–ù–∞–ª–∏—á–Ω—ã–µ –∫—É—Ä—å–µ—Ä—É –≤ —Ä—É–ø–∏—è—Ö", "/sposob_pay 1 test $order_id"),
        ];
        $buttons[] = [
            $this->buildInlineKeyBoardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ BRI –≤ —Ä—É–ø–∏—è—Ö", "/sposob_pay 2 $price $order_id"),
        ];
        $buttons[] = [
            $this->buildInlineKeyBoardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –≤ —Ä—É–±–ª—è—Ö", "/sposob_pay 3 $price $order_id"),
        ];
        $buttons[] = [
            $this->buildInlineKeyBoardButton("–û–ø–ª–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–∞–º–∏", "/sposob_pay 4 $price $order_id"),
        ];
    } else {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Cash to courier", "/sposob_pay 1 test $order_id"),
        ];
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Transfer to local BRI bank", "/sposob_pay 2 $price $order_id"),
        ];
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Pay with bonuses", "/sposob_pay 4 $price $order_id"),
        ];
    }

    $this->sendMessage($order['chat_id'], $template->text, $buttons);
    return;
}

if ($atext[0] == "/pay_type_bonus_success" && $atext[1]) {
    $order_id = (int)$atext[1];

    $order = R::findOne("orders", "id = $order_id");

    $price = (int)str_replace(".", "", $order["price"]);

    $user = R::findOne("users", "chat_id = {$order["chat_id"]}");

    if ($price > $user["balance"]) {
        $sum_can_pay_bonus = $price - $user["balance"];
        $sum_can_pay_bonus_content = number_format($price - $user["balance"], 0, "", ".");

        $template = new Template("order/payment/partial_bonuses", $user['lang'], [
            new TemplateData(":orderId", $order_id),
            new TemplateData(":sumCanPayBonusContent", $sum_can_pay_bonus_content)
        ]);
        $template->Load();

        switch ($user['lang']) {
            case 'ru':
                $buttons = [
                    [
                        $this->buildInlineKeyBoardButton("–ù–∞–ª–∏—á–Ω—ã–µ –∫—É—Ä—å–µ—Ä—É –≤ —Ä—É–ø–∏—è—Ö", "/sposob_pay 1 test $order_id"),
                    ],
                    [
                        $this->buildInlineKeyBoardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∏–Ω–¥–æ–Ω–µ–∑–∏–π—Å–∫—É—é –∫–∞—Ä—Ç—É –≤ —Ä—É–ø–∏—è—Ö", "/sposob_pay 2 $sum_can_pay_bonus $order_id"),
                    ],
                    [
                        $this->buildInlineKeyBoardButton("–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –≤ —Ä—É–±–ª—è—Ö", "/sposob_pay 3 $sum_can_pay_bonus $order_id"),
                    ],
                ];
                break;
            case 'eng':
                $buttons = [
                    [
                        $this->buildInlineKeyBoardButton("Cash to courier", "/sposob_pay 1 test $order_id"),
                    ],
                    [
                        $this->buildInlineKeyBoardButton("Transfer to local BRI bank", "/sposob_pay 2 $sum_can_pay_bonus $order_id"),
                    ],
                ];
        }

        $order->bonus_payed = $user["balance"];
    } else {
        $remaining_user_bonus_count = number_format($user["balance"] - $price, 0, "", ".");

        $template = new Template('order/payment/bonuses', $user['lang'], [
            new TemplateData(":orderId", $order_id),
            new TemplateData(':remainingUserBonusCount', $remaining_user_bonus_count)
        ]);
        $template->Load();

        switch ($user['lang']) {
            case 'ru':
                $buttons_user = [
                    [
                        $this->buildInlineKeyBoardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", " ", "https://t.me/LaundryGoBot"),
                    ],
                ];
                break;
            case 'eng':
                $buttons_user = [
                    [
                        $this->buildInlineKeyBoardButton("Write to the manager", " ", "https://t.me/LaundryGoBot"),
                    ],
                ];
        }

        $order->bonus_payed = $price;
        $order->payment = 4;
    }

    R::store($order);
    $user->balance -= $order->bonus_payed;
    R::store($user);

    $this->DelMessageText($order['temp_chat_id'], $order["mess_id"]);
    $this->sendOrdersAdmin($order['temp_chat_id'], $order_id, $username);
    $this->DelMessageText($order['chat_id'], $message_id);
    $this->sendMessage($order['chat_id'], $template->text, $buttons);
}

if ($atext[0] == "/usermailing_answer" && $atext[1] && $atext[2]) {
    $mailing_id = (int)$atext[1];
    $answer = (int)$atext[2];

    // –ø–æ–ª—É—á–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id
    $user = R::findOne("users", "chat_id = $chat_id");

    // –ø–æ–ª—É—á–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ id
    $mailing = R::findOne("usermailing", "id = $mailing_id");

    // —É–¥–∞–ª—è—é –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    $this->DelMessageText($user["chat_id"], $message_id);

    // —Å–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    $mailinganswer = R::dispense("usermailinganswers");
    $mailinganswer["user_id"] = $user["id"];
    $mailinganswer["mailing_id"] = $mailing_id;
    $mailinganswer["answer"] = $answer;
    R::store($mailinganswer);

    // —Ñ–æ—Ä–º–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    $template = new Template('usermailing_answer', $user['lang']);
    $template->Load();

    // –æ—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    $this->sendMessage($chat_id, $template->text);
}


if ($atext[0] == "/orders_report" && $atext[1]) {

    $orderId = (int)$atext[1];

    $order = R::findOne("orders", "id = $orderId");


    if ($order['photo_before']) {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Pickup photo", "", "https://laundrybot.online/bot/" . $order['photo_before']),
        ];
    }

    if ($order['photo_in_laundry']) {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Photo in laundry", "", "https://laundrybot.online/bot/" . $order['photo_in_laundry']),
        ];
    }

    if ($order['video_before_washing']) {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Photo before washing", "", "https://laundrybot.online/bot/" . $order['video_before_washing']),
        ];
    }/* else {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Video before washing", "/video_none $orderId"),
        ];
    }*/

    if ($order['video_after_washing']) {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Photo after washing", "", "https://laundrybot.online/bot/" . $order['video_after_washing']),
        ];
    }/* else {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Video after washing", "/video_none $orderId"),
        ];
    }*/

    if ($order['photo_on_the_scales']) {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Weight", "/photo_on_the_scales $orderId"),
        ];
    }

    if ($order['delivered_photo']) {
        $buttons[] = [
            $this->buildInlineKeyBoardButton("Delivered", "/photo_of_the_delivered $orderId"),
        ];
    }

    /*
        $buttons[] = [
            $this->buildInlineKeyBoardButton("–°heck", "/print_check_admin $orderId"),
        ];
    */

    $buttons[] = [
        $this->buildInlineKeyBoardButton("Back", "/cancel_osob_end $orderId"),
    ];

    $this->editMessageReplyMarkup($chat_id, $message_id, $buttons);

    return;
}

if ($atext[0] == "/order_report_back") {

    $this->DelMessageText($chat_id, $message_id);
    return;
}


if ($atext[0] == "/video_none" && $atext[1]) {
    $orderId = (int)$atext[1];

    $content = "Order video <b>#" . $orderId . "</b> not loaded.";

    $buttons[] = [
        $this->buildInlineKeyBoardButton("Back", "/cancel_osob_end $orderId"),
    ];

    $this->sendMessage($chat_id, $content, $buttons);

    return;
}

if ($atext[0] == "/photo_on_the_scales" && $atext[1]) {
    $orderId = (int)$atext[1];

    $order = R::findOne("orders", "id = $orderId");

    $photos = json_decode($order['photo_on_the_scales'], true);

    $buttons[] = [
        $this->buildInlineKeyBoardButton("Back", "/cancel_osob_end $orderId"),
    ];

    $content = '';
    $content .= "<b>Order #$order[id] - photo on the scales.</b>\n";

    if (count($photos) > 0) {
        foreach ($photos as $key => $photo) {
            $content .= "<a href='https://laundrybot.online/bot/$photo[photo]'>Photo #" . ($key + 1) . "</a>\n";
            /*
            $content = "–§–æ—Ç–æ #".($key+1);
            $this->sendPhoto($chat_id, "https://laundrybot.online/bot/" . $photo['photo'], $content, $buttons);
            */
        }
    } else {
        $content = "Order photo <b>#" . $orderId . "</b> not loaded.";
        $this->sendMessage($chat_id, $content, $buttons);
    }

    $this->sendMessage($chat_id, $content, $buttons);

    return;
}


if ($atext[0] == "/photo_of_the_delivered" && $atext[1]) {
    $orderId = (int)$atext[1];

    $order = R::findOne("orders", "id = $orderId");

    $photos = json_decode($order['delivered_photo'], true);

    $buttons[] = [
        $this->buildInlineKeyBoardButton("Back", "/cancel_osob_end $orderId"),
    ];

    $content = '';
    $content .= "<b>Order #$order[id] - photo of the delivered.</b>\n";

    if (count($photos) > 0) {
        foreach ($photos as $key => $photo) {
            $content .= "<a href='https://laundrybot.online/bot/$photo[photo]'>Photo #" . ($key + 1) . "</a>\n";
            /*
            $content = "–§–æ—Ç–æ #".($key+1);
            $this->sendPhoto($chat_id, "https://laundrybot.online/bot/" . $photo['photo'], $content, $buttons);
            */
        }
    } else {
        $content = "Order photo <b>#" . $orderId . "</b> not loaded.";
        $this->sendMessage($chat_id, $content, $buttons);
    }

    $this->sendMessage($chat_id, $content, $buttons);

    return;
}


if ($atext[0] == "/print_check_admin" && $atext[1]) {

    $this->DelMessageText($chat_id, $message_id);

    $orderId = (int)$atext[1];

    $order = R::findOne("orders", "id = $orderId");

    if ($order['check_order']) {
        $content = "–§–æ—Ç–æ —á–µ–∫–∞ –∑–∞–∫–∞–∑–∞ <b>#" . $orderId . "</b>";

        if ($order['check_admin'] == null) {
            $buttons[] = [
                $this->buildInlineKeyBoardButton("OK", "/check_success $orderId $message_id"),
            ];

            $buttons[] = [
                $this->buildInlineKeyBoardButton("CANCEL", "/check_cancel $orderId"),
            ];


            $this->sendPhoto(ID_CHAT, "https://laundrybot.online/bot/" . $order['check_order'], $content, $buttons);

        } else {
            if ($chat_id == ID_CHAT || $chat_id == GROUP_COURIER_CHAT_ID || $chat_id == GROUP_WASHERS_CHAT_ID) {
                $this->sendPhoto($chat_id, "https://laundrybot.online/bot/" . $order['check_order'], $content);
            }
        }
    } else {
        $content = "–§–æ—Ç–æ —á–µ–∫–∞ –∑–∞–∫–∞–∑–∞ <b>#" . $orderId . "</b> –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ. –ó–∞–≥—Ä—É–∑–∏—Ç—å?";

        $buttons[] = [
            $this->buildInlineKeyBoardButton("üëçYes", "/sendCheck $orderId $chat_id"),
        ];

        $buttons[] = [
            $this->buildInlineKeyBoardButton("üëéNo", "/check_load_photo_no $orderId"),
        ];

        if ($chat_id == ID_CHAT || $chat_id == GROUP_COURIER_CHAT_ID || $chat_id == GROUP_WASHERS_CHAT_ID) {
            $this->sendMessage($chat_id, $content, $buttons);
        }
    }
    return;
}


if ($atext[0] == "/check_load_photo_success" && $atext[1]) {
    $orderId = (int)$atext[1];

    $content = "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:";

    $buttons[] = [
        $this->buildInlineKeyBoardButton("Back", "/order_report_back"),
    ];

    $this->sendMessage(ID_CHAT, $content, $buttons);

    $this->set_action($chat_id, "check_load_photo_success&$orderId");

    return;
}

if ($atext[0] == "/check_load_photo_no" && $atext[1]) {
    $orderId = (int)$atext[1];
    $this->DelMessageText($chat_id, $message_id);
    return;
}


if ($atext[0] == "/check_success" && $atext[1]) {

    $orderId = (int)$atext[1];

    $order = R::findOne("orders", "id = $orderId");

    $order['check_admin'] = 1;

    R::store($order);
    $content = "‚úÖ –ó–∞–∫–∞–∑ ‚Ññ $orderId –æ–ø–ª–∞—á–µ–Ω.
–°–ø–∞—Å–∏–±–æ –æ–≥—Ä–æ–º–Ω–æ–µ.
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –∑–∞–∫–∞–∑—É –Ω–∞–ø–∏—à–∏—Ç–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É.
";
    $buttons[] = [
        $this->buildInlineKeyBoardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", " ", "https://t.me/LaundryGoBot"),
    ];
    $buttons[] = [
        $this->buildInlineKeyBoardButton("–ó–∞–∫–∞–∑–∞—Ç—å —Å—Ç–∏—Ä–∫—É", "/nachalo"),
    ];


    $this->sendMessage($order['chat_id'], $content, $buttons);
    $this->DelMessageText($chat_id, $message_id);

}


if ($atext[0] == "/check_cancel" && $atext[1]) {

    $this->DelMessageText($chat_id, $message_id);

    $orderId = (int)$atext[1];

    $order = R::findOne("orders", "id = $orderId");

    unlink($order['check_order']);

    $order['check_order'] = "";
    R::store($order);

    $content = "–ß–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω";


    $buttons[] = [
        $this->buildInlineKeyBoardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —á–µ–∫–∞", "/send_check $orderId  $chat_id"),
    ];

    $buttons[] = [
        $this->buildInlineKeyBoardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", " ", "https://t.me/LaundryGoBot"),
    ];

    $this->sendMessage($order['chat_id'], $content, $buttons);
}


if ($atext[0] == "/order_report" && $atext[1]) {

    if ($chat_id == GROUP_WASHERS_CHAT_ID) {
        $order = R::findOne('orders', "id = $atext[1]");
        $user = R::findOne('users', "chat_id = {$order["chat_id"]}");

        $this->DelMessageText($chat_id, $message_id);
        $this->sendOrderWasher($atext[1], $user['username'], $order['status'], True);
    } elseif ($chat_id == ID_CHAT || $chat_id == GROUP_COURIER_CHAT_ID) {
        $this->DelMessageText($chat_id, $message_id);
        $this->sendOrdersAdmin($chat_id, $atext[1], $message_id, True);
    }
}


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –±–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function regusers($chat_id, $first_name, $last_name, $username)
{
    $users = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $getchat_id = $users->chat_id;

    if ($chat_id == $getchat_id) {

    } else {
        $save = R::dispense('users');
        $save->chat_id = $chat_id;
        $save->first_name = "$first_name";
        $save->last_name = "$last_name";
        $save->username = "$username";
        $save->balance = 0;
        $save->phone = " ";
        $save->date_reg = time();
        $save->status = 1;
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç
        R::store($save);
    }
}


if ($atext[0] == '/return_to_admin' && $atext[1]) {
    $this->sendOrdersAdmin(ID_CHAT, $atext[1], $username);
}


if ($atext[0] == '/return_to_courier' && $atext[1]) {
    $this->sendOrdersAdmin(GROUP_COURIER_CHAT_ID, $atext[1], $username);
}


if ($atext[0] == '/change_lang') {
    $user = R::findOne('users', 'chat_id = ?', [$chat_id]);
    $template = new Template("lang");
    $template->Load();
    $template->LoadButtons();

    $this->sendMessage($chat_id, $template->text, $template->buttons);
}
    
    
    